{
    "collab_server" : "",
    "contents" : "## START OF SYNTAX ##\n\n########################################################################################################################\n## Step 1: Identify a reproducible cluster algorithm \n########################################################################################################################\n\n#=======================================================================================================================\n## Set up objects & Prepare\n#=======================================================================================================================\n\n## Set plot parameters and margins -------------------------------------------------------------------------------------\npar(mfrow=c(1,1), mar=c(5.1,5.1,4.1,2.1), xpd=T)\n\n## Create a list of Ck values to run for each reproducibility index ----------------------------------------------------\nCks<-(2:10)\n\n## Create a list of colors for side-by-side boxplots -------------------------------------------------------------------\nGreys<-c(\"#A0A0A0\", \"#404040\")\n\n\n#=======================================================================================================================\n## Write main & supporting functions to run split half cross validation (SHCV) for each cluster algorithm \n#=======================================================================================================================\n\n## Write functions to print cluster solutions for each cluster algorithm, for any Ck -----------------------------------\nkca.fun<-function(data, Ck){\n  as.numeric(kmeans(data, Ck, nstart=50)$cluster)\n  }\nwardD.fun<-function(data, Ck){\n  as.numeric(cutree(hclust(dist(data), method = \"ward.D\"), Ck))\n  }\n\n## Create dataframe with only the 5 tastes for cluster analysis (only the 5 tastes) ------------------------------------\nmydata1<-mydata[,1:5]\n\n## write function to run SHCV for any given cluster algorithm and Ck ---------------------------------------------------\nshcv.fun<-function(data, Ck, FUN){\n  # Create temporary matrix to store data; 20 rows (20 estimates for each index) x 2 cols (1 for each index)\n  temp<-matrix(NA,20,2, dimnames = list(c(1:20), c(paste(\"ARI.\", Ck, sep=\"\"), \n                                                   paste(\"CramV.\", Ck, sep=\"\"))))\n  \n  # Use for loop to generate 10 random test/train sets; for each set, generate 2 estimates for each index\n  for (i in 1:10){\n    # 1. split data into train and test set\n    train.n<-sample(nrow(data), nrow(data)*0.5, replace=F) \n    train.dat<-data[train.n,]; test.dat<-data[-(train.n),]\n    \n    # 2. Run cluster algorithm on train.dat\n    train.clust<-FUN(train.dat, Ck)\n    \n    # 3. Perform K- Nearest Neighbors on test.dat using train.clust\n    test.knn<-knn(train.dat, test.dat, cl=train.clust, Ck, use.all = T, prob=T, l=0.5)\n    \n    # 4. Run cluster algorithm on test.dat\n    test.clust<-FUN(test.dat, Ck)\n    \n    # 5. Compute ari & cramer's V between test.clust and test.knn \n    ## a. store data in \"temp\" matrix\n    temp[i,1]<- adj.rand.index(test.clust, as.numeric(test.knn))\n    temp[i,2]<- cramerV(test.clust, as.numeric(test.knn))\n    \n    # 6.Repeate steps 2-5 using test sample as the \"train\" sample\n    test.clust<-FUN(test.dat, Ck)\n    train.knn<-knn(test.dat, train.dat, cl=test.clust, Ck, use.all = T, prob=T, l=0.5)\n    train.clust<-FUN(train.dat, Ck)\n    \n    ## a. store data temporarily\n    temp[i+10,1]<- adj.rand.index(train.clust, as.numeric(train.knn))\n    temp[i+10,2]<- cramerV(train.clust, as.numeric(train.knn))\n  }\n  \n  # Print temp matrix with 20 estimates for each index per alg for each \n  return(temp)\n}\n\n\n#=======================================================================================================================\n## Run SHCV for each Ck; store results separately for each index \n#=======================================================================================================================\n\n## create matrices for storage -----------------------------------------------------------------------------------------\n### 40 rows (20 per algorithm) x 10 columns (1 per Ck, from 2-10)\nari.dat<-matrix(c(rep(1,20), rep(2,20)),40,10,\n                dimnames = list(1:40, c(paste(\"Ck.\", 2:10, sep=\"\"), \"alg\")))\ncramv.dat<-matrix(c(rep(1,20), rep(2,20)),40,10,\n                  dimnames = list(1:40, c(paste(\"Ck.\", 2:10, sep=\"\"), \"alg\")))\n\n## Use for loop to run SHCV for each index, for Cks from 2:10 -----------------------------------------------------------\nfor (Ck in Cks){\n  set.seed(2468)\n  temp.kca<-shcv.fun(mydata1, Ck, kca.fun)  \n  temp.wardD<-shcv.fun(mydata1, Ck, wardD.fun)  \n  ari.dat[,Ck-1]<-cbind(temp.kca[,1], temp.wardD[,1])\n  cramv.dat[,Ck-1]<-cbind(temp.kca[,2], temp.wardD[,2])\n}\n\n## save ari.dat and cramv.dat as .rda files ----------------------------------------------------------------------------\nsaveRDS(as.data.frame(ari.dat), file = \"Output/P2.Tab_ARI.rda\")\nsaveRDS(cramv.dat, file = \"Output/P2.Tab_CramV.rda\")\n\n\n#=======================================================================================================================\n## Visualize data using side-by-side boxplot\n#=======================================================================================================================\n\n## Convert each matrix to long format and \"alg\" (algorithm) to a factor var --------------------------------------------\nari.l.dat<-reshape(as.data.frame(ari.dat), varying = list(colnames(ari.dat)[1:9]),\n                   timevar = \"Ck\", v.names = \"ARI\", direction = \"long\")\ncramv.l.dat<-reshape(as.data.frame(cramv.dat), varying = list(colnames(cramv.dat)[1:9]),\n                     timevar = \"Ck\", v.names = \"CramV\", direction = \"long\")\n\n\n## A. Adjusted Rand Index ----------------------------------------------------------------------------------------------\nari.sum.plot %<a-% {\n  with(ari.l.dat,\n       boxplot(ARI~alg, col=Greys, frame=T, axes=F, ylim=c(0,0.9),\n               boxwex = 0.5, varwidth=F, ylab=\"ARI\",\n               xlab=NA, cex.lab=1.15, cex.main=1.25))\n  axis(side=1, at=c(1,2), labels = c(\"K-means\", \"Ward's D\"))\n  axis(side=2, at=seq(0,0.9,0.1))\n  }\n\n## Print ari summary box plot ------------------------------------------------------------------------------------------\nari.sum.plot\n\n## B. Cramerâ€™s V -------------------------------------------------------------------------------------------------------\ncramv.sum.plot %<a-% {\n  with(cramv.l.dat,\n       boxplot(CramV~alg, col=Greys, frame=T, axes=F, ylim=c(0.2,0.92),\n               boxwex = 0.5, varwidth=F, ylab=\"Cramer's V\",\n               xlab=NA, cex.lab=1.15, cex.main=1.25))\n  axis(side=1, at=c(1,2), labels = c(\"K-means\", \"Ward's D\"))\n  axis(side=2, at=seq(0.2,0.92,0.1))\n}\n\n## Print CramV Summary Box Plot ----------------------------------------------------------------------------------------\ncramv.sum.plot\n\n## Create 2 Panel Figure -----------------------------------------------------------------------------------------------\npanel.repro.plot %<a-%{\n  par(mar=c(5.1,5.1,4.1,2.1), mfrow=c(1,2))\n  ari.sum.plot\n  cramv.sum.plot\n}\n\n## Print panel plot of reproducibility indices ----------------------------------------------------------------------------\npanel.repro.plot\n\n\n## END OF SYNTAX ##\n\n",
    "created" : 1610750612479.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4174611769",
    "id" : "C9E23F63",
    "lastKnownWriteTime" : 1610745259,
    "last_content_update" : 1610745259,
    "path" : "~/Documents/GitHub/taste-profiles/step1-identify_algorithm.R",
    "project_path" : "step1-identify_algorithm.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}